#include <chrono>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <sys/time.h>
#include <chrono>

namespace StBase {

using namespace std::chrono;

class Timestamp;
// 以微秒为单位
class Duration
{
    public:
    static const int64_t MicroSecond = 1;
    static const int64_t MilliSecond = 1000 * MicroSecond;
    static const int64_t Second = 1000 * MilliSecond;
    static const int64_t Minute = 60 * Second;
    static const int64_t Hour = 60 * Minute;
    friend class Timestamp;

    public:
    Duration(int64_t t) : microSec_(t)
    {
    }

    bool operator==(const Duration &dur)
    {
        return microSec_ == dur.microSec_;
    }

    bool operator>(const Duration &dur)
    {
        return microSec_ > dur.microSec_;
    }

    private:
    int64_t microSec_;
};

class Timestamp
{
    public:
    static const int64_t MicroSecondsPerSecond = 1000 * 1000;

    Timestamp() = default;
    Timestamp(const Timestamp &) = default;
    Timestamp(Timestamp &&) = default;

    explicit Timestamp(int64_t t) : microSec_(t)
    {
    }

    static Timestamp Now()
    {
        ::timeval val;
        gettimeofday(&val, NULL);
        return Timestamp(static_cast<int64_t>(val.tv_sec * MicroSecondsPerSecond + val.tv_usec));
    }

    static Timestamp FromUnixTime(time_t tt)
    {
        return FromUnixTime(tt, 0);
    }

    static Timestamp FromUnixTime(time_t tt, int mics)
    {
        return Timestamp(static_cast<int64_t>(tt * MicroSecondsPerSecond + mics));
    }

    static Timestamp FromString(const std::string &str)
    {
        int year, mon, day, hour, min, sec;
        ::sscanf(str.c_str(), "%d-%d-%d %d:%d:%d", &year, &mon, &day, &hour, &min, &sec);
        struct tm t = { 0 };
        t.tm_year = year - 1900;
        t.tm_mon = mon - 1;
        t.tm_mday = day;
        t.tm_hour = hour;
        t.tm_min = min;
        t.tm_sec = sec;
        return Timestamp::FromUnixTime(timegm(&t));
    }

    static Timestamp FromDayTime(int year, int mon, int day, int hour = 0, int min = 0,
                                 int sec = 0)
    {
        ::tm t = { 0 };
        t.tm_year = year - 1900;
        t.tm_mon = mon - 1;
        t.tm_mday = day;
        t.tm_hour = hour;
        t.tm_min = min;
        t.tm_sec = sec;
        return Timestamp::FromUnixTime(timegm(&t));
    }

    public:
    ::time_t ToUnixTime() const
    {
        return static_cast<time_t>(microSec_ / MicroSecondsPerSecond);
    }

    ::tm ToTmTime() const
    {
        time_t tt_time = static_cast<time_t>(microSec_ / MicroSecondsPerSecond);
        struct tm tm_time = { 0 };
        gmtime_r(&tt_time, &tm_time);
        return tm_time;
    }

    std::string FormatString() const
    {
        time_t tt_time = static_cast<time_t>(microSec_ / MicroSecondsPerSecond);
        struct tm tm_time = { 0 };
        gmtime_r(&tt_time, &tm_time);
        char buf[64] = { 0 };
        snprintf(buf, sizeof(buf), "%4d-%02d-%02d %02d:%02d:%02d", tm_time.tm_year + 1900,
                 tm_time.tm_mon + 1, tm_time.tm_mday, tm_time.tm_hour, tm_time.tm_min,
                 tm_time.tm_sec);
        return buf;
    }

    Duration During(const Timestamp &a)
    {
        if (this->microSec_ > a.microSec_) {
            return Duration(this->microSec_ - a.microSec_);
        }
        return Duration(a.microSec_ - this->microSec_);
    }

    Timestamp &operator=(const Timestamp &tp)
    {
        if (this != &tp) {
            this->microSec_ = tp.microSec_;
        }
        return *this;
    }

    friend bool operator<(const Timestamp &ltp, const Timestamp &rtp)
    {
        return ltp.microSec_ < rtp.microSec_;
    }

    friend bool operator==(const Timestamp &ltp, const Timestamp &rtp)
    {
        return ltp.microSec_ == rtp.microSec_;
    }

    friend bool operator!=(const Timestamp &ltp, const Timestamp &rtp)
    {
        return ltp.microSec_ != rtp.microSec_;
    }

    Timestamp &operator-(const Duration &dur)
    {
        this->microSec_ -= dur.microSec_;
        return *this;
    }
    Timestamp &operator+(const Duration &dur)
    {
        this->microSec_ += dur.microSec_;
        return *this;
    }

    private:
    int64_t microSec_;
};


}